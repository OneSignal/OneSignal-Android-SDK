name: Publish to Maven Central

on:
  push:
    branches:
      - publish_job

  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      BW_CLIENTID: ${{ secrets.BW_CLIENTID }}
      BW_CLIENTSECRET: ${{ secrets.BW_CLIENTSECRET }}
      BW_MASTER_PASSWORD: ${{ secrets.BW_MASTER_PASSWORD }}
      ITEM_NAME: MavenCentral Secrets
      GPG_FILE_NAME: onesignal_sdk_gpg_subkeys

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Ensure Java 11 or 17
        id: setup-java
        run: |
          CURRENT_JAVA=$(java -version 2>&1 | head -n 1 | awk -F '"' '{print $2}')
          echo "Current Java version: $CURRENT_JAVA"

          if [[ "$CURRENT_JAVA" != 11.* && "$CURRENT_JAVA" != 17.* ]]; then
            echo "Installing Java 11..."
            sudo apt-get update
            sudo apt-get install openjdk-11-jdk -y
            echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
            echo "/usr/lib/jvm/java-11-openjdk-amd64/bin" >> $GITHUB_PATH
          else
            echo "Java version $CURRENT_JAVA is compatible."
          fi

      - name: Install Bitwarden CLI
        run: |
          curl -Ls "https://vault.bitwarden.com/download/?app=cli&platform=linux" -o bw.zip
          unzip bw.zip -d bw-bin
          sudo mv bw-bin/bw /usr/local/bin
          bw --version

      - name: Login + Unlock Bitwarden
        run: |
          bw login --apikey
          SESSION=$(bw unlock "$BW_MASTER_PASSWORD" --raw)
          echo "BW_SESSION=$SESSION" >> $GITHUB_ENV

      - name: Fetch Maven + Signing secrets from Bitwarden
        run: |
          ITEM_JSON=$(bw get item "$ITEM_NAME" --session "$BW_SESSION")
          
          echo "centralUsername=$(echo "$ITEM_JSON" | jq -r '.fields[] | select(.name=="centralUsername") | .value')" >> $GITHUB_ENV
          echo "centralPassword=$(echo "$ITEM_JSON" | jq -r '.fields[] | select(.name=="centralPassword") | .value')" >> $GITHUB_ENV
          echo "keyId=$(echo "$ITEM_JSON" | jq -r '.fields[] | select(.name=="keyId") | .value')" >> $GITHUB_ENV
          echo "signingPassword=$(echo "$ITEM_JSON" | jq -r '.fields[] | select(.name=="signingPassword") | .value')" >> $GITHUB_ENV

      - name: Download GPG Key File from Bitwarden
        run: |
          ITEM_ID=$(bw list items --session "$BW_SESSION" | jq -r '.[] | select(.name=="MavenCentral Secrets") | .id')
          bw get attachment "$GPG_FILE_NAME" --itemid "$ITEM_ID" --session "$BW_SESSION" --output "$GPG_FILE_NAME"
          echo "signing.secretKeyRingFile=$(pwd)/$GPG_FILE_NAME" >> $GITHUB_ENV

      - name: Assemble Release
        run: |
          ./gradlew assembleRelease
        working-directory: OneSignalSDK

      - name: Publish to Maven Central
        run: |
          echo "::add-mask::${{ env.centralPassword }}"
          echo "::add-mask::${{ env.signingPassword }}"
          echo "::add-mask::${{ env.centralUsername }}"
          echo "::add-mask::${{ env.keyId }}"
          echo "::add-mask::${{ env.GPG_FILE_NAME }}"
          set +x
          echo "Publishing to Maven Central..."

          ./gradlew publishAndReleaseToMavenCentral --no-configuration-cache \
            -PmavenCentralUsername="$centralUsername" \
            -PmavenCentralPassword="$centralPassword" \
            -Psigning.keyId="$keyId" \
            -Psigning.password="$signingPassword" \
            -Psigning.secretKeyRingFile="${{ github.workspace }}/${{ env.GPG_FILE_NAME }}"
        working-directory: OneSignalSDK

      - name: Extract SDK_VERSION from gradle.properties
        id: version
        run: |
          VERSION=$(grep '^SDK_VERSION=' OneSignalSDK/gradle.properties | cut -d '=' -f2)
          echo "SDK_VERSION=$VERSION" >> $GITHUB_ENV
          echo "SDK_VERSION=$VERSION"

      - name: Authenticate gh
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine release channel
        id: release_info
        run: |
          VERSION="${{ env.SDK_VERSION }}"
      
          if [[ "$VERSION" == *"alpha"* ]]; then
            CHANNEL="alpha"
            PRERELEASE="--prerelease"
          elif [[ "$VERSION" == *"beta"* ]]; then
            CHANNEL="beta"
            PRERELEASE="--prerelease"
          else
            CHANNEL="Current"
            PRERELEASE=""
          fi
      
          echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

      - name: Tag and create GitHub release
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git tag "${SDK_VERSION}"
          git push origin "${SDK_VERSION}"

          gh release create "${SDK_VERSION}" \
            --title "${SDK_VERSION}" \
            --notes "Channels: $CHANNEL" \
            $PRERELEASE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}