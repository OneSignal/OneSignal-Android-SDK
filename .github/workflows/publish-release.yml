name: Publish Release

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      SDK_SIGNING_KEY_ID: ${{ secrets.SDK_SIGNING_KEY_ID }}
      SDK_SIGNING_PASSWORD: ${{ secrets.SDK_SIGNING_PASSWORD }}
      SDK_SIGNING_SECRET_KEY_RING_ENCODED: ${{ secrets.SDK_SIGNING_SECRET_KEY_RING_ENCODED }}
      GPG_FILE_NAME: onesignal_sdk_gpg_subkeys

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Ensure Java 11 or 17
        run: |
          CURRENT_JAVA=$(java -version 2>&1 | head -n 1 | awk -F '"' '{print $2}')
          echo "Current Java version: $CURRENT_JAVA"
          if [[ "$CURRENT_JAVA" != 11.* && "$CURRENT_JAVA" != 17.* ]]; then
            echo "Installing Java 11..."
            sudo apt-get update
            sudo apt-get install openjdk-11-jdk -y
            echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
            echo "/usr/lib/jvm/java-11-openjdk-amd64/bin" >> $GITHUB_PATH
          fi

      - name: Decode GPG key from base64
        run: |
          echo "$SDK_SIGNING_SECRET_KEY_RING_ENCODED" | base64 -d > $GPG_FILE_NAME
          echo "signing.secretKeyRingFile=$(pwd)/$GPG_FILE_NAME" >> $GITHUB_ENV

      - name: Extract SDK_VERSION from gradle.properties
        id: version
        run: |
          VERSION=$(grep '^SDK_VERSION=' OneSignalSDK/gradle.properties | cut -d '=' -f2)
          echo "SDK_VERSION=$VERSION" >> $GITHUB_ENV
          echo "SDK_VERSION=$VERSION"

      - name: Checkout release branch and assemble release
        run: |
          VERSION="${{ env.SDK_VERSION }}"
          BRANCH="rel/$VERSION"

          echo "Checking if branch $BRANCH exists..."
          if ! git ls-remote --exit-code --heads origin "$BRANCH"; then
            echo "❌ Branch '$BRANCH' does not exist on remote. Aborting."
            exit 1
          fi

          git fetch origin "$BRANCH"
          git checkout "$BRANCH"

          ./gradlew assembleRelease
        working-directory: OneSignalSDK

      - name: Publish to Maven Central
        run: |
          set +x  # Prevent secrets from being printed
          echo "Publishing to Maven Central..."

          ./gradlew publishAndReleaseToMavenCentral --no-configuration-cache \
            -PmavenCentralUsername="${MAVEN_USERNAME}" \
            -PmavenCentralPassword="${MAVEN_PASSWORD}" \
            -Psigning.keyId="${SDK_SIGNING_KEY_ID}" \
            -Psigning.password="${SDK_SIGNING_PASSWORD}" \
            -Psigning.secretKeyRingFile="${{ github.workspace }}/${{ env.GPG_FILE_NAME }}"
        working-directory: OneSignalSDK

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine release channel
        id: release_info
        run: |
          VERSION="${{ env.SDK_VERSION }}"
          if [[ "$VERSION" == *"alpha"* ]]; then
            PRERELEASE="--prerelease"
          elif [[ "$VERSION" == *"beta"* ]]; then
            PRERELEASE="--prerelease"
          else
            PRERELEASE=""
          fi
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

      - name: Tag and create GitHub release
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          VERSION="${{ env.SDK_VERSION }}"

          echo "Creating tag $VERSION..."
          git tag "$VERSION"
          git push origin "$VERSION"

          echo "Fetching last merged PR from release branch..."
          PR_BODY=$(gh pr list --state merged --search "rel/$VERSION in:title" --json body --jq '.[0].body')

          if [[ -z "$PR_BODY" ]]; then
            PR_BODY="No PR body found for rel/$VERSION"
          fi

          echo "$PR_BODY" > release_notes.md

          echo "Creating GitHub release..."
          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes-file release_notes.md \
            ${{ env.PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete release branch from remote
        if: success()
        run: |
          VERSION="${{ env.SDK_VERSION }}"
          BRANCH="rel/$VERSION"

          echo "Deleting remote branch $BRANCH..."
          git push origin --delete "$BRANCH"