name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New SDK version (e.g. 5.1.38 or 5.2.0-beta1)'
        type: string
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create release branch from main (delete it first, it it already exists)
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH="rel/$VERSION"

          git fetch origin
          
          # Delete local branch if it exists
          if git show-ref --quiet refs/heads/"$BRANCH"; then
            echo "Deleting local branch $BRANCH"
            git branch -D "$BRANCH"
          fi

          # Delete remote branch if it exists (optional)
          if git ls-remote --exit-code --heads origin "$BRANCH"; then
            echo "Deleting remote branch $BRANCH"
            git push origin --delete "$BRANCH"
          fi

          # Create branch fresh from origin/main
          git checkout -b "$BRANCH" origin/main

      - name: Update gradle.properties files with SDK_VERSION
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Updating SDK_VERSION to $VERSION"
          
          sed -i.bak "s/^SDK_VERSION=.*/SDK_VERSION=$VERSION/" OneSignalSDK/gradle.properties
          rm OneSignalSDK/gradle.properties.bak
          
          sed -i.bak "s/^SDK_VERSION=.*/SDK_VERSION=$VERSION/" Examples/OneSignalDemo/gradle.properties
          rm Examples/OneSignalDemo/gradle.properties.bak
          
      - name: Configure Git and commit changes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH="rel/$VERSION"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git commit -am "chore: bump SDK_VERSION to $VERSION"
          git push origin "$BRANCH"
          
      - name: Generate Release Notes from Commits
        id: generate_notes
        run: |
          echo "## 🔖 Auto-Generated Release Notes" > pr_body.md
          echo "" >> pr_body.md

          VERSION="${{ github.event.inputs.version }}"

          # Determine release channel
          if [[ "$VERSION" == *"alpha"* ]]; then
            CHANNEL="alpha"
          elif [[ "$VERSION" == *"beta"* ]]; then
            CHANNEL="beta"
          else
            CHANNEL="current"
          fi

          echo "**Channels:** $CHANNEL" >> pr_body.md
          echo "" >> pr_body.md

          git fetch origin main

          # Find last release merge commit (merge from rel/*)
          LAST_RELEASE_COMMIT=$(git log origin/main --merges --pretty=format:"%H %s" \
            | grep -m 1 -E "Merge pull request.*from rel/" \
            | cut -d' ' -f1)

          echo "Last release merge commit: $LAST_RELEASE_COMMIT"

          COMMITS=$(git log $LAST_RELEASE_COMMIT..HEAD --pretty=format:"%s")

          echo "$COMMITS" > all_commits.txt

          echo "### 🚀 New Features" >> pr_body.md
          grep -E '^feat' all_commits.txt | sed 's/^/- /' >> pr_body.md || echo "- _None_" >> pr_body.md

          echo "" >> pr_body.md
          echo "### 🐛 Bug Fixes" >> pr_body.md
          grep -E '^bug' all_commits.txt | sed 's/^/- /' >> pr_body.md || echo "- _None_" >> pr_body.md

          echo "" >> pr_body.md
          echo "### 🔧 Improvements" >> pr_body.md
          grep -E '^(perf|refactor)' all_commits.txt | sed 's/^/- /' >> pr_body.md || echo "- _None_" >> pr_body.md

          echo "" >> pr_body.md
          echo "### 📝 Uncategorized Commits" >> pr_body.md
          grep -v -E '^(feat|bug|perf|refactor)' all_commits.txt | sed 's/^/- /' >> pr_body.md || echo "- _None_" >> pr_body.md

          echo "" >> pr_body.md
          echo "### 📦 Version" >> pr_body.md
          echo "$VERSION" >> pr_body.md
          
          echo "" >> pr_body.md

          # Final fallback: check if any commits were found at all
          if [[ -z "$COMMITS" ]]; then
            echo "### ⚠️ No commits found" >> pr_body.md
            echo "_No commits were found since the last release merge._" >> pr_body.md
            echo "Release manager to verify and add appropriate release notes." >> pr_body.md
          fi

      - name: Create Pull Request
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH="rel/$VERSION"

          gh pr create \
            --title "Release SDK v$VERSION" \
            --body-file pr_body.md \
            --head "$BRANCH" \
            --base main
