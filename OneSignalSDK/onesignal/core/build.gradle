plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.vanniktech.maven.publish'
}

import org.jetbrains.kotlin.gradle.dsl.JvmTarget

android {
    compileSdkVersion rootProject.buildVersions.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.buildVersions.minSdkVersion
        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "SDK_VERSION", "\"${rootProject.version}\""
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        original {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
        }
        unity {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests.all {
            maxParallelForks 1
            maxHeapSize '2048m'
        }
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            it.useJUnitPlatform()
        }
    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }
//    kotlinOptions {
//        jvmTarget = '1.8'
//    }
//    kotlin {
//        jvmToolchain(8)
//    }
    kotlin {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_1_8)
            javaParameters.set(true)
        }
    }
    namespace 'com.onesignal.core'

    kotlinOptions.freeCompilerArgs += ['-module-name', namespace]

//    buildFeatures {
//        compose = true
//    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

// jar { from('resources') { include 'META-INF/services/*.*' } }

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams false // Enable to have logging print
    }
}

ext {
    projectName = "OneSignal SDK Core"
    projectDescription = "OneSignal Android SDK - Core Module"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    compileOnly('com.amazon.device:amazon-appstore-sdk:[3.0.1, 3.0.99]')

    api('androidx.appcompat:appcompat') {
        version {
            require '[1.0.0, 1.3.99]'
            prefer '1.3.1'
        }
    }

    // Remote logging - honeycomb.io
    // android-agent - This includes crash and ANR handlers, but we can't use because we can't
    //    filter them to the com.onesignal namespace.
    // TODO: Find dependencies and include directly instead of using this.
    implementation("io.opentelemetry.android:android-agent:0.15.0-alpha")

      implementation("io.opentelemetry.android:core:0.11.0-alpha")
//    implementation('io.opentelemetry:opentelemetry-sdk-logs') // 1.49.0

    // For definning our own crash handling
    implementation("com.google.auto.service:auto-service:1.1.1")
    implementation("com.google.auto.service:auto-service-annotations:1.1.1")
    // TODO: Maybe don't need
   // implementation("io.opentelemetry.android:instrumentation:0.4.0-alpha")
//    implementation("io.opentelemetry.android:instrumentation-android-instrumentation:0.10.0-alpha")
//    implementation("io.opentelemetry.android:instrumentation-common-api:0.10.0-alpha")
    implementation("io.opentelemetry:opentelemetry-sdk")
    // TODO: Maybe don't need
    implementation("io.opentelemetry.android:common:0.15.0-alpha")



    implementation("io.honeycomb.android:honeycomb-opentelemetry-android:0.0.19")
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.1.5")

//    implementation("io.opentelemetry:opentelemetry-sdk")

    testImplementation(project(':OneSignal:testhelpers'))

    testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
    testImplementation("io.kotest:kotest-runner-junit5-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-assertions-core:$kotestVersion")
    testImplementation("io.kotest:kotest-property:$kotestVersion")
    testImplementation("org.robolectric:robolectric:4.8.1")
    // kotest-extensions-android allows Robolectric to work with Kotest via @RobolectricTest
    testImplementation("br.com.colman:kotest-extensions-android:0.1.1")
    testImplementation("androidx.test:core-ktx:1.4.0")
    testImplementation("androidx.test:core:1.4.0")
    testImplementation("io.mockk:mockk:1.13.2")
    testImplementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    // com.tdunning:json is needed for non-Robolectric tests.
    testImplementation("com.tdunning:json:$tdunningJsonForTest")
}

ktlint {
    version = "$ktlintVersion"
    additionalEditorconfig = [
        "max_line_length": "500",
    ]
}

apply from: '../maven-push.gradle'
