ext {
    buildVersions = [
            minSdkVersion: 16
    ]
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'

android {
    compileSdkVersion rootProject.buildVersions.compileSdkVersion
    defaultConfig {
        minSdkVersion buildVersions.minSdkVersion
        consumerProguardFiles 'consumer-proguard-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testOptions.unitTests.includeAndroidResources = true
    }

    buildTypes {
        original {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
        }
        unity {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests.all {
            maxParallelForks 1
            maxHeapSize '2048m'
        }
        unitTests {
            includeAndroidResources = true
        }
    }
    // Forced downgrade to Java 8 so SDK is backwards compatible in consuming projects
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams false // Enable to have logging print
    }
}

// api || implementation = compile and runtime

// KEEP: version ranges, these get used in the released POM file for maven central
// NOTE: To prevent consumers from getting alpha or beta version of dependencies listed here
//         make sure the latest minor value is a known stable version. Using a range for the
//         patch version is ok, since this allows getting bug fix versions.
dependencies {
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly('com.amazon.device:amazon-appstore-sdk:[3.0.1, 3.0.99]')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation 'androidx.work:work-runtime-ktx:2.7.1'

    // play-services-location:16.0.0 is the last version before going to AndroidX
    // play-services-location:17.0.0 is the first version using AndroidX
    compileOnly('com.google.android.gms:play-services-location:[17.0.0, 18.0.99]') {
        version {
            require '[17.0.0, 18.0.99]'
            prefer '18.0.0'
        }
    }

    // play-services-base:16.1.0 is the last version before going to AndroidX
    // play-services-base:17.0.0 is the first version using AndroidX
    // Required for GoogleApiAvailability
    implementation('com.google.android.gms:play-services-base') {
        version {
            require '[17.0.0, 17.6.99]'
            prefer '17.6.0'
        }
    }

    // firebase-messaging:18.0.0 is the last version before going to AndroidX
    // firebase-messaging:19.0.0 is the first version using AndroidX
    // firebase-messaging:23.0.0 incoporates fix for SecurityException: Not allowed to bind to service
    api('com.google.firebase:firebase-messaging') {
        version {
            require '[19.0.0, 23.0.99]'
            prefer '23.0.0'
        }
    }

    // Huawei PushKit
    // KEEP as "compileOnly", so OneSignal isn't a direct dependency in the POM file.
    compileOnly "com.huawei.hms:push:$huaweiHMSPushVersion"
    compileOnly "com.huawei.hms:location:$huaweiHMSLocationVersion"

    api('androidx.cardview:cardview') {
        version {
            require '[1.0.0, 1.0.99]'
            prefer '1.0.0'
        }
    }
    api('androidx.legacy:legacy-support-v4') {
        version {
            require '[1.0.0, 1.0.99]'
            prefer '1.0.0'
        }
    }
    api('androidx.browser:browser') {
        version {
            require '[1.0.0, 1.3.99]'
            prefer '1.3.0'
        }
    }
    api('androidx.appcompat:appcompat') {
        version {
            require '[1.0.0, 1.3.99]'
            prefer '1.3.1'
        }
    }
    api('androidx.work:work-runtime') {
        version {
            require '[2.1.0, 2.7.99]'
            prefer '2.7.1'
        }
    }

    testImplementation("junit:junit:4.13.2")
    testImplementation("io.kotest:kotest-runner-junit4:$kotestVersion")
    testImplementation("io.kotest:kotest-runner-junit4-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-assertions-core:$kotestVersion")
    testImplementation("io.kotest:kotest-property:$kotestVersion")
    testImplementation("org.robolectric:robolectric:4.8.1")
    testImplementation("androidx.test:core-ktx:1.4.0")
    testImplementation("androidx.test:core:1.4.0")
    testImplementation("io.mockk:mockk:1.13.2")
    testImplementation("org.json:json:20180813")
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

apply from: 'maven-push.gradle'

