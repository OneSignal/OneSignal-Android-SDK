// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        buildVersions = [
                compileSdkVersion: 34,
                targetSdkVersion: 34,
                minSdkVersion: 21
        ]
        androidGradlePluginVersion = '8.8.2'
        detektVersion = '1.23.8'
        googleServicesGradlePluginVersion = '4.3.10'
        huaweiAgconnectVersion = '1.9.1.304'
        huaweiHMSPushVersion = '6.3.0.304'
        huaweiHMSLocationVersion = '4.0.0.300'
        kotlinVersion = '1.7.10'
        kotestVersion = '5.8.0'
        ioMockVersion = '1.13.2'
        ktlintVersion = '1.0.1' // Used by Spotless for Kotlin formatting
        spotlessVersion = '6.25.0'
        tdunningJsonForTest = '1.0' // DO NOT upgrade for tests, using an old version so it matches AOSP

        sharedRepos = {
            google()
            mavenCentral()
            gradlePluginPortal()
            // Huawei maven
            maven { url 'https://developer.huawei.com/repo/' }
        }
        sharedDeps = [
            "com.android.tools.build:gradle:$androidGradlePluginVersion",
            "com.google.gms:google-services:$googleServicesGradlePluginVersion",
            "com.huawei.agconnect:agcp:$huaweiAgconnectVersion",
            "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion",
            "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion",
            "com.diffplug.spotless:spotless-plugin-gradle:$spotlessVersion",
            "com.vanniktech.maven.publish:com.vanniktech.maven.publish.gradle.plugin:0.32.0"
        ]
    }

    buildscript {
        repositories sharedRepos
        dependencies {
            classpath sharedDeps
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
        // Huawei maven
        maven { url 'https://developer.huawei.com/repo/' }
    }
}

subprojects {
    plugins.withId("io.gitlab.arturbosch.detekt") {
        afterEvaluate {
            def configureDetektTask = { task ->
                // Only analyze main source sets
                task.source = files(
                    "$projectDir/src/main/java",
                    "$projectDir/src/main/kotlin"
                )
                // Exclude all test-related files and directories
                task.exclude "**/test/**", "**/androidTest/**", "**/src/test/**", "**/src/androidTest/**",
                    "**/*Test.kt", "**/*Tests.kt", "**/*Spec.kt",
                    "**/*Test.java", "**/*Tests.java", "**/*Spec.java"
                
                // Enable type resolution to catch !! operator
                task.jvmTarget = "1.8"
            }
            
            tasks.withType(io.gitlab.arturbosch.detekt.Detekt).configureEach(configureDetektTask)
            tasks.withType(io.gitlab.arturbosch.detekt.DetektCreateBaselineTask).configureEach(configureDetektTask)
        }
    }
}
