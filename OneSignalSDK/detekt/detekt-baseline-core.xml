<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:PropertiesModelStoreListener.kt$PropertiesModelStoreListener$path.startsWith(PropertiesModel::locationTimestamp.name) || path.startsWith(PropertiesModel::locationBackground.name) || path.startsWith(PropertiesModel::locationType.name) || path.startsWith(PropertiesModel::locationAccuracy.name)</ID>
    <ID>ComplexCondition:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$args.size == 4 &amp;&amp; args[0] == Int::class.javaPrimitiveType &amp;&amp; args[1] == String::class.java &amp;&amp; args[2] == String::class.java &amp;&amp; args[3] == Bundle::class.java &amp;&amp; returnType == Bundle::class.java</ID>
    <ID>ComplexCondition:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$args.size == 4 &amp;&amp; args[0] == Int::class.javaPrimitiveType &amp;&amp; args[1] == String::class.java &amp;&amp; args[2] == String::class.java &amp;&amp; args[3] == String::class.java</ID>
    <ID>ComplexMethod:ConfigModelStoreListener.kt$ConfigModelStoreListener$private fun fetchParams()</ID>
    <ID>ComplexMethod:HttpClient.kt$HttpClient$private suspend fun makeRequestIODispatcher( url: String, method: String?, jsonBody: JSONObject?, timeout: Int, headers: OptionalHeaders?, ): HttpResponse</ID>
    <ID>ComplexMethod:IdentityOperationExecutor.kt$IdentityOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>ComplexMethod:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private suspend fun createUser( createUserOperation: LoginUserOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>ComplexMethod:OSDatabase.kt$OSDatabase$@Synchronized private fun internalOnUpgrade( db: SQLiteDatabase, oldVersion: Int, newVersion: Int, )</ID>
    <ID>ComplexMethod:OperationModelStore.kt$OperationModelStore$override fun create(jsonObject: JSONObject?): Operation?</ID>
    <ID>ComplexMethod:OperationRepo.kt$OperationRepo$internal suspend fun executeOperations(ops: List&lt;OperationQueueItem&gt;)</ID>
    <ID>ComplexMethod:PreferencesService.kt$PreferencesService$private fun get( store: String, key: String, type: Class&lt;*&gt;, defValue: Any?, ): Any?</ID>
    <ID>ComplexMethod:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private suspend fun getUser(op: RefreshUserOperation): ExecutionResponse</ID>
    <ID>ComplexMethod:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private suspend fun createSubscription( createOperation: CreateSubscriptionOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>ComplexMethod:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>ConstructorParameterNaming:BackgroundManager.kt$BackgroundManager$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:BackgroundManager.kt$BackgroundManager$private val _backgroundServices: List&lt;(IBackgroundService)&gt;</ID>
    <ID>ConstructorParameterNaming:BackgroundManager.kt$BackgroundManager$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:ConfigModelStoreListener.kt$ConfigModelStoreListener$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:ConfigModelStoreListener.kt$ConfigModelStoreListener$private val _paramsBackendService: IParamsBackendService</ID>
    <ID>ConstructorParameterNaming:ConfigModelStoreListener.kt$ConfigModelStoreListener$private val _subscriptionManager: ISubscriptionManager</ID>
    <ID>ConstructorParameterNaming:DatabaseCursor.kt$DatabaseCursor$private val _cursor: Cursor</ID>
    <ID>ConstructorParameterNaming:DatabaseProvider.kt$DatabaseProvider$private val _application: IApplicationService</ID>
    <ID>ConstructorParameterNaming:DeviceService.kt$DeviceService$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:HttpClient.kt$HttpClient$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:HttpClient.kt$HttpClient$private val _connectionFactory: IHttpConnectionFactory</ID>
    <ID>ConstructorParameterNaming:HttpClient.kt$HttpClient$private val _installIdService: IInstallIdService</ID>
    <ID>ConstructorParameterNaming:HttpClient.kt$HttpClient$private val _prefs: IPreferencesService</ID>
    <ID>ConstructorParameterNaming:HttpClient.kt$HttpClient$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:HttpConnectionFactory.kt$HttpConnectionFactory$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:IdentityBackendService.kt$IdentityBackendService$private val _httpClient: IHttpClient</ID>
    <ID>ConstructorParameterNaming:IdentityModelStoreListener.kt$IdentityModelStoreListener$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:IdentityOperationExecutor.kt$IdentityOperationExecutor$private val _buildUserService: IRebuildUserService</ID>
    <ID>ConstructorParameterNaming:IdentityOperationExecutor.kt$IdentityOperationExecutor$private val _identityBackend: IIdentityBackendService</ID>
    <ID>ConstructorParameterNaming:IdentityOperationExecutor.kt$IdentityOperationExecutor$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:IdentityOperationExecutor.kt$IdentityOperationExecutor$private val _newRecordState: NewRecordsState</ID>
    <ID>ConstructorParameterNaming:InfluenceDataRepository.kt$InfluenceDataRepository$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:InfluenceManager.kt$InfluenceManager$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:InfluenceManager.kt$InfluenceManager$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:InfluenceManager.kt$InfluenceManager$private val _sessionService: ISessionService</ID>
    <ID>ConstructorParameterNaming:InstallIdService.kt$InstallIdService$private val _prefs: IPreferencesService</ID>
    <ID>ConstructorParameterNaming:LanguageContext.kt$LanguageContext$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserFromSubscriptionOperationExecutor.kt$LoginUserFromSubscriptionOperationExecutor$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserFromSubscriptionOperationExecutor.kt$LoginUserFromSubscriptionOperationExecutor$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserFromSubscriptionOperationExecutor.kt$LoginUserFromSubscriptionOperationExecutor$private val _subscriptionBackend: ISubscriptionBackendService</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _application: IApplicationService</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _deviceService: IDeviceService</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _identityOperationExecutor: IdentityOperationExecutor</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _languageContext: ILanguageContext</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _subscriptionsModelStore: SubscriptionModelStore</ID>
    <ID>ConstructorParameterNaming:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private val _userBackend: IUserBackendService</ID>
    <ID>ConstructorParameterNaming:Model.kt$Model$/** * The optional parent model property that references this model. When this is * specified, must also specify [_parentModel] */ private val _parentProperty: String? = null</ID>
    <ID>ConstructorParameterNaming:Model.kt$Model$/** * The optional parent model. When specified this model is a child model, any changes * to this model will *also* be propagated up to it's parent for notification. When * this is specified, must also specify [_parentProperty] */ private var _parentModel: Model? = null</ID>
    <ID>ConstructorParameterNaming:ModelStore.kt$ModelStore$private val _prefs: IPreferencesService? = null</ID>
    <ID>ConstructorParameterNaming:NewRecordsState.kt$NewRecordsState$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:NewRecordsState.kt$NewRecordsState$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:OSDatabase.kt$OSDatabase$private val _outcomeTableProvider: OutcomeTableProvider</ID>
    <ID>ConstructorParameterNaming:OperationRepo.kt$OperationRepo$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:OperationRepo.kt$OperationRepo$private val _newRecordState: NewRecordsState</ID>
    <ID>ConstructorParameterNaming:OperationRepo.kt$OperationRepo$private val _operationModelStore: OperationModelStore</ID>
    <ID>ConstructorParameterNaming:OperationRepo.kt$OperationRepo$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsBackendService.kt$OutcomeEventsBackendService$private val _http: IHttpClient</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _deviceService: IDeviceService</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _influenceManager: IInfluenceManager</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _outcomeEventsBackend: IOutcomeEventsBackendService</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _outcomeEventsCache: IOutcomeEventsRepository</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _outcomeEventsPreferences: IOutcomeEventsPreferences</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _session: ISessionService</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _subscriptionManager: ISubscriptionManager</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsController.kt$OutcomeEventsController$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:OutcomeEventsRepository.kt$OutcomeEventsRepository$private val _databaseProvider: IDatabaseProvider</ID>
    <ID>ConstructorParameterNaming:ParamsBackendService.kt$ParamsBackendService$private val _http: IHttpClient</ID>
    <ID>ConstructorParameterNaming:PreferencesService.kt$PreferencesService$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:PreferencesService.kt$PreferencesService$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:PropertiesModelStoreListener.kt$PropertiesModelStoreListener$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:RebuildUserService.kt$RebuildUserService$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:RebuildUserService.kt$RebuildUserService$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:RebuildUserService.kt$RebuildUserService$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:RebuildUserService.kt$RebuildUserService$private val _subscriptionsModelStore: SubscriptionModelStore</ID>
    <ID>ConstructorParameterNaming:RecoverConfigPushSubscription.kt$RecoverConfigPushSubscription$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:RecoverConfigPushSubscription.kt$RecoverConfigPushSubscription$private val _subscriptionModelStore: SubscriptionModelStore</ID>
    <ID>ConstructorParameterNaming:RecoverFromDroppedLoginBug.kt$RecoverFromDroppedLoginBug$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:RecoverFromDroppedLoginBug.kt$RecoverFromDroppedLoginBug$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:RecoverFromDroppedLoginBug.kt$RecoverFromDroppedLoginBug$private val _operationRepo: IOperationRepo</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _buildUserService: IRebuildUserService</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _newRecordState: NewRecordsState</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _subscriptionsModelStore: SubscriptionModelStore</ID>
    <ID>ConstructorParameterNaming:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private val _userBackend: IUserBackendService</ID>
    <ID>ConstructorParameterNaming:RequestPermissionService.kt$RequestPermissionService$private val _application: IApplicationService</ID>
    <ID>ConstructorParameterNaming:SessionListener.kt$SessionListener$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:SessionListener.kt$SessionListener$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:SessionListener.kt$SessionListener$private val _operationRepo: IOperationRepo</ID>
    <ID>ConstructorParameterNaming:SessionListener.kt$SessionListener$private val _outcomeEventsController: IOutcomeEventsController</ID>
    <ID>ConstructorParameterNaming:SessionListener.kt$SessionListener$private val _sessionService: ISessionService</ID>
    <ID>ConstructorParameterNaming:SessionManager.kt$SessionManager$private val _outcomeController: IOutcomeEventsController</ID>
    <ID>ConstructorParameterNaming:SessionService.kt$SessionService$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:SessionService.kt$SessionService$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:SessionService.kt$SessionService$private val _sessionModelStore: SessionModelStore</ID>
    <ID>ConstructorParameterNaming:SessionService.kt$SessionService$private val _time: ITime</ID>
    <ID>ConstructorParameterNaming:SimpleModelStore.kt$SimpleModelStore$/** * Will be called whenever a new [TModel] needs to be instantiated. */ private val _create: () -&gt; TModel</ID>
    <ID>ConstructorParameterNaming:SimpleModelStore.kt$SimpleModelStore$_prefs: IPreferencesService? = null</ID>
    <ID>ConstructorParameterNaming:SubscriptionBackendService.kt$SubscriptionBackendService$private val _httpClient: IHttpClient</ID>
    <ID>ConstructorParameterNaming:SubscriptionList.kt$SubscriptionList$private val _fallbackPushSub: IPushSubscription</ID>
    <ID>ConstructorParameterNaming:SubscriptionManager.kt$SubscriptionManager$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:SubscriptionManager.kt$SubscriptionManager$private val _sessionService: ISessionService</ID>
    <ID>ConstructorParameterNaming:SubscriptionManager.kt$SubscriptionManager$private val _subscriptionModelStore: SubscriptionModelStore</ID>
    <ID>ConstructorParameterNaming:SubscriptionModelStoreListener.kt$SubscriptionModelStoreListener$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:SubscriptionModelStoreListener.kt$SubscriptionModelStoreListener$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _buildUserService: IRebuildUserService</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _consistencyManager: IConsistencyManager</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _deviceService: IDeviceService</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _newRecordState: NewRecordsState</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _subscriptionBackend: ISubscriptionBackendService</ID>
    <ID>ConstructorParameterNaming:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private val _subscriptionModelStore: SubscriptionModelStore</ID>
    <ID>ConstructorParameterNaming:TrackGooglePurchase.kt$TrackGooglePurchase$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:TrackGooglePurchase.kt$TrackGooglePurchase$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:TrackGooglePurchase.kt$TrackGooglePurchase$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:TrackGooglePurchase.kt$TrackGooglePurchase$private val _operationRepo: IOperationRepo</ID>
    <ID>ConstructorParameterNaming:TrackGooglePurchase.kt$TrackGooglePurchase$private val _prefs: IPreferencesService</ID>
    <ID>ConstructorParameterNaming:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$private val _buildUserService: IRebuildUserService</ID>
    <ID>ConstructorParameterNaming:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$private val _consistencyManager: IConsistencyManager</ID>
    <ID>ConstructorParameterNaming:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$private val _newRecordState: NewRecordsState</ID>
    <ID>ConstructorParameterNaming:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$private val _userBackend: IUserBackendService</ID>
    <ID>ConstructorParameterNaming:UserBackendService.kt$UserBackendService$private val _httpClient: IHttpClient</ID>
    <ID>ConstructorParameterNaming:UserManager.kt$UserManager$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:UserManager.kt$UserManager$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:UserManager.kt$UserManager$private val _languageContext: ILanguageContext</ID>
    <ID>ConstructorParameterNaming:UserManager.kt$UserManager$private val _propertiesModelStore: PropertiesModelStore</ID>
    <ID>ConstructorParameterNaming:UserManager.kt$UserManager$private val _subscriptionManager: ISubscriptionManager</ID>
    <ID>ConstructorParameterNaming:UserRefreshService.kt$UserRefreshService$private val _applicationService: IApplicationService</ID>
    <ID>ConstructorParameterNaming:UserRefreshService.kt$UserRefreshService$private val _configModelStore: ConfigModelStore</ID>
    <ID>ConstructorParameterNaming:UserRefreshService.kt$UserRefreshService$private val _identityModelStore: IdentityModelStore</ID>
    <ID>ConstructorParameterNaming:UserRefreshService.kt$UserRefreshService$private val _operationRepo: IOperationRepo</ID>
    <ID>ConstructorParameterNaming:UserRefreshService.kt$UserRefreshService$private val _sessionService: ISessionService</ID>
    <ID>EmptyCatchBlock:JSONUtils.kt$JSONUtils${ }</ID>
    <ID>EmptyDefaultConstructor:ApplicationService.kt$ApplicationService$()</ID>
    <ID>EmptyDefaultConstructor:CallbackProducer.kt$CallbackProducer$()</ID>
    <ID>EmptyDefaultConstructor:DebugManager.kt$DebugManager$()</ID>
    <ID>EmptyDefaultConstructor:PushSubscription.kt$UninitializedPushSubscription$()</ID>
    <ID>EmptyDefaultConstructor:SubscriptionModel.kt$SubscriptionType$()</ID>
    <ID>ForbiddenComment:DeviceService.kt$DeviceService$// TODO: Maybe able to switch to GoogleApiAvailability.isGooglePlayServicesAvailable to simplify</ID>
    <ID>ForbiddenComment:HttpClient.kt$HttpClient$// TODO: SHOULD RETURN OK INSTEAD OF NOT_MODIFIED TO MAKE TRANSPARENT?</ID>
    <ID>ForbiddenComment:IPreferencesService.kt$PreferenceOneSignalKeys$* (String) The serialized IAMs TODO: This isn't currently used, determine if actually needed for cold start IAM fetch delay</ID>
    <ID>ForbiddenComment:IUserBackendService.kt$IUserBackendService$// TODO: Change to send only the push subscription, optimally</ID>
    <ID>ForbiddenComment:LoginHelper.kt$LoginHelper$// TODO: Set JWT Token for all future requests.</ID>
    <ID>ForbiddenComment:LogoutHelper.kt$LogoutHelper$// TODO: remove JWT Token for all future requests.</ID>
    <ID>ForbiddenComment:OperationRepo.kt$OperationRepo$// TODO: Need to provide callback for app to reset JWT. For now, fail with no retry.</ID>
    <ID>ForbiddenComment:ParamsBackendService.kt$ParamsBackendService$// TODO: New</ID>
    <ID>ForbiddenComment:PermissionsActivity.kt$PermissionsActivity$// TODO after we remove IAM from being an activity window we may be able to remove this handler</ID>
    <ID>ForbiddenComment:PermissionsActivity.kt$PermissionsActivity$// TODO improve this method</ID>
    <ID>ForbiddenComment:PermissionsViewModel.kt$PermissionsViewModel.Companion$// TODO this will be removed once the handler is deleted</ID>
    <ID>ForbiddenComment:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$// TODO: whenever the end-user changes users, we need to add the read-your-write token here, currently no code to handle the re-fetch IAMs</ID>
    <ID>ForbiddenComment:TrackGooglePurchase.kt$TrackGooglePurchase$// TODO: Handle very large list. Test for continuationToken != null then call getPurchases again</ID>
    <ID>FunctionOnlyReturningConstant:AndroidUtils.kt$AndroidUtils$@Keep fun opaqueHasClass(_class: Class&lt;*&gt;): Boolean</ID>
    <ID>FunctionParameterNaming:AndroidUtils.kt$AndroidUtils$_class: Class&lt;*&gt;</ID>
    <ID>FunctionParameterNaming:JSONUtils.kt$JSONUtils$`object`: Any</ID>
    <ID>InstanceOfCheckForException:HttpClient.kt$HttpClient$t is ConnectException</ID>
    <ID>InstanceOfCheckForException:HttpClient.kt$HttpClient$t is UnknownHostException</ID>
    <ID>LongMethod:ApplicationService.kt$ApplicationService$override suspend fun waitUntilSystemConditionsAvailable(): Boolean</ID>
    <ID>LongMethod:ConfigModelStoreListener.kt$ConfigModelStoreListener$private fun fetchParams()</ID>
    <ID>LongMethod:HttpClient.kt$HttpClient$private suspend fun makeRequestIODispatcher( url: String, method: String?, jsonBody: JSONObject?, timeout: Int, headers: OptionalHeaders?, ): HttpResponse</ID>
    <ID>LongMethod:IdentityOperationExecutor.kt$IdentityOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>LongMethod:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private suspend fun createUser( createUserOperation: LoginUserOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>LongMethod:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private suspend fun loginUser( loginUserOp: LoginUserOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>LongMethod:OperationRepo.kt$OperationRepo$internal suspend fun executeOperations(ops: List&lt;OperationQueueItem&gt;)</ID>
    <ID>LongMethod:OutcomeEventsController.kt$OutcomeEventsController$private suspend fun sendAndCreateOutcomeEvent( name: String, weight: Float, // Note: this is optional sessionTime: Long, influences: List&lt;Influence&gt;, ): OutcomeEvent?</ID>
    <ID>LongMethod:OutcomeEventsController.kt$OutcomeEventsController$private suspend fun sendUniqueOutcomeEvent( name: String, sessionInfluences: List&lt;Influence&gt;, ): OutcomeEvent?</ID>
    <ID>LongMethod:OutcomeEventsRepository.kt$OutcomeEventsRepository$override suspend fun getAllEventsToSend(): List&lt;OutcomeEventParams&gt;</ID>
    <ID>LongMethod:OutcomeEventsRepository.kt$OutcomeEventsRepository$override suspend fun getNotCachedUniqueInfluencesForOutcome( name: String, influences: List&lt;Influence&gt;, ): List&lt;Influence&gt;</ID>
    <ID>LongMethod:OutcomeEventsRepository.kt$OutcomeEventsRepository$override suspend fun saveOutcomeEvent(eventParams: OutcomeEventParams)</ID>
    <ID>LongMethod:ParamsBackendService.kt$ParamsBackendService$override suspend fun fetchParams( appId: String, subscriptionId: String?, ): ParamsObject</ID>
    <ID>LongMethod:PropertyOperationHelper.kt$PropertyOperationHelper$fun createPropertiesFromOperation( operation: SetPropertyOperation, propertiesObject: PropertiesObject, ): PropertiesObject</ID>
    <ID>LongMethod:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private suspend fun getUser(op: RefreshUserOperation): ExecutionResponse</ID>
    <ID>LongMethod:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private suspend fun createSubscription( createOperation: CreateSubscriptionOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>LongMethod:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private suspend fun updateSubscription( startingOperation: UpdateSubscriptionOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>LongMethod:TrackGooglePurchase.kt$TrackGooglePurchase$private fun queryBoughtItems()</ID>
    <ID>LongMethod:TrackGooglePurchase.kt$TrackGooglePurchase$private fun sendPurchases( skusToAdd: ArrayList&lt;String&gt;, newPurchaseTokens: ArrayList&lt;String&gt;, )</ID>
    <ID>LongMethod:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>LongParameterList:IDatabase.kt$IDatabase$( table: String, columns: Array&lt;String&gt;? = null, whereClause: String? = null, whereArgs: Array&lt;String&gt;? = null, groupBy: String? = null, having: String? = null, orderBy: String? = null, limit: String? = null, action: (ICursor) -&gt; Unit, )</ID>
    <ID>LongParameterList:IOutcomeEventsBackendService.kt$IOutcomeEventsBackendService$( appId: String, userId: String, subscriptionId: String, deviceType: String, direct: Boolean?, event: OutcomeEvent, )</ID>
    <ID>LongParameterList:IParamsBackendService.kt$ParamsObject$( var googleProjectNumber: String? = null, var enterprise: Boolean? = null, var useIdentityVerification: Boolean? = null, var notificationChannels: JSONArray? = null, var firebaseAnalytics: Boolean? = null, var restoreTTLFilter: Boolean? = null, var clearGroupOnSummaryClick: Boolean? = null, var receiveReceiptEnabled: Boolean? = null, var disableGMSMissingPrompt: Boolean? = null, var unsubscribeWhenNotificationsDisabled: Boolean? = null, var locationShared: Boolean? = null, var requiresUserPrivacyConsent: Boolean? = null, var opRepoExecutionInterval: Long? = null, var influenceParams: InfluenceParamsObject, var fcmParams: FCMParamsObject, )</ID>
    <ID>LongParameterList:IUserBackendService.kt$IUserBackendService$( appId: String, aliasLabel: String, aliasValue: String, properties: PropertiesObject, refreshDeviceMetadata: Boolean, propertyiesDelta: PropertiesDeltasObject, )</ID>
    <ID>LongParameterList:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$( private val _identityOperationExecutor: IdentityOperationExecutor, private val _application: IApplicationService, private val _deviceService: IDeviceService, private val _userBackend: IUserBackendService, private val _identityModelStore: IdentityModelStore, private val _propertiesModelStore: PropertiesModelStore, private val _subscriptionsModelStore: SubscriptionModelStore, private val _configModelStore: ConfigModelStore, private val _languageContext: ILanguageContext, )</ID>
    <ID>LongParameterList:OutcomeEventsController.kt$OutcomeEventsController$( private val _session: ISessionService, private val _influenceManager: IInfluenceManager, private val _outcomeEventsCache: IOutcomeEventsRepository, private val _outcomeEventsPreferences: IOutcomeEventsPreferences, private val _outcomeEventsBackend: IOutcomeEventsBackendService, private val _configModelStore: ConfigModelStore, private val _identityModelStore: IdentityModelStore, private val _subscriptionManager: ISubscriptionManager, private val _deviceService: IDeviceService, private val _time: ITime, )</ID>
    <ID>LongParameterList:SubscriptionObject.kt$SubscriptionObject$( val id: String? = null, val type: SubscriptionObjectType? = null, val token: String? = null, val enabled: Boolean? = null, val notificationTypes: Int? = null, val sdk: String? = null, val deviceModel: String? = null, val deviceOS: String? = null, val rooted: Boolean? = null, val netType: Int? = null, val carrier: String? = null, val appVersion: String? = null, )</ID>
    <ID>LongParameterList:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$( private val _subscriptionBackend: ISubscriptionBackendService, private val _deviceService: IDeviceService, private val _applicationService: IApplicationService, private val _subscriptionModelStore: SubscriptionModelStore, private val _configModelStore: ConfigModelStore, private val _buildUserService: IRebuildUserService, private val _newRecordState: NewRecordsState, private val _consistencyManager: IConsistencyManager, )</ID>
    <ID>LongParameterList:UserSwitcher.kt$UserSwitcher$( private val preferencesService: IPreferencesService, private val operationRepo: IOperationRepo, private val services: ServiceProvider, private val idManager: IDManager = IDManager, private val identityModelStore: IdentityModelStore, private val propertiesModelStore: PropertiesModelStore, private val subscriptionModelStore: SubscriptionModelStore, private val configModel: ConfigModel, private val oneSignalUtils: OneSignalUtils = OneSignalUtils, private val carrierName: String? = null, private val deviceOS: String? = null, private val androidUtils: AndroidUtils = AndroidUtils, private val appContextProvider: () -&gt; Context, )</ID>
    <ID>LoopWithTooManyJumpStatements:ModelStore.kt$ModelStore$for (index in jsonArray.length() - 1 downTo 0) { val newModel = create(jsonArray.getJSONObject(index)) ?: continue /* * NOTE: Migration fix for bug introduced in 5.1.12 * The following check is intended for the operation model store. * When the call to this method moved out of the operation model store's initializer, * duplicate operations could be cached. * See https://github.com/OneSignal/OneSignal-Android-SDK/pull/2099 */ val hasExisting = models.any { it.id == newModel.id } if (hasExisting) { Logging.debug("ModelStore&lt;$name&gt;: load - operation.id: ${newModel.id} already exists in the store.") continue } models.add(0, newModel) // listen for changes to this model newModel.subscribe(this) }</ID>
    <ID>MagicNumber:ApplicationService.kt$ApplicationService$50</ID>
    <ID>MagicNumber:BackgroundManager.kt$BackgroundManager$5000</ID>
    <ID>MagicNumber:ChannelTracker.kt$ChannelTracker$1000L</ID>
    <ID>MagicNumber:ChannelTracker.kt$ChannelTracker$60</ID>
    <ID>MagicNumber:CompletionAwaiter.kt$CompletionAwaiter$10</ID>
    <ID>MagicNumber:ConfigModelStoreListener.kt$ConfigModelStoreListener$1000</ID>
    <ID>MagicNumber:HttpClient.kt$HttpClient$1_000</ID>
    <ID>MagicNumber:HttpClient.kt$HttpClient$429</ID>
    <ID>MagicNumber:HttpClient.kt$HttpClient$5000</ID>
    <ID>MagicNumber:IDeviceService.kt$IDeviceService.DeviceType.Huawei$13</ID>
    <ID>MagicNumber:IdentityOperationExecutor.kt$IdentityOperationExecutor$404</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$400</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$401</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$402</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$403</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$404</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$409</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$410</ID>
    <ID>MagicNumber:NetworkUtils.kt$NetworkUtils$429</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$3</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$4</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$5</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$6</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$7</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$8</ID>
    <ID>MagicNumber:OSDatabase.kt$OSDatabase$9</ID>
    <ID>MagicNumber:OneSignalDispatchers.kt$OneSignalDispatchers$1024</ID>
    <ID>MagicNumber:OperationRepo.kt$OperationRepo$1_000</ID>
    <ID>MagicNumber:OutcomeEventsController.kt$OutcomeEventsController$1000</ID>
    <ID>MagicNumber:PermissionsActivity.kt$PermissionsActivity$23</ID>
    <ID>MagicNumber:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$404</ID>
    <ID>MagicNumber:SessionListener.kt$SessionListener$1000</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.DISABLED_FROM_REST_API_DEFAULT_REASON$30</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.ERROR$9999</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.FIREBASE_FCM_ERROR_IOEXCEPTION_AUTHENTICATION_FAILED$29</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.FIREBASE_FCM_ERROR_IOEXCEPTION_OTHER$11</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.FIREBASE_FCM_ERROR_IOEXCEPTION_SERVICE_NOT_AVAILABLE$9</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.FIREBASE_FCM_ERROR_MISC_EXCEPTION$12</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.FIREBASE_FCM_INIT_ERROR$8</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.HMS_API_EXCEPTION_OTHER$27</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.HMS_ARGUMENTS_INVALID$26</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.HMS_TOKEN_TIMEOUT$25</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.INVALID_FCM_SENDER_ID$6</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.MISSING_FIREBASE_FCM_LIBRARY$4</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.MISSING_HMS_PUSHKIT_LIBRARY$28</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.MISSING_JETPACK_LIBRARY$3</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.OUTDATED_GOOGLE_PLAY_SERVICES_APP$7</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.OUTDATED_JETPACK_LIBRARY$5</ID>
    <ID>MagicNumber:SubscriptionModel.kt$SubscriptionStatus.UNSUBSCRIBE$2</ID>
    <ID>MagicNumber:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$404</ID>
    <ID>MagicNumber:TimeUtils.kt$TimeUtils$1000</ID>
    <ID>MagicNumber:TrackGooglePurchase.kt$TrackGooglePurchase$1000000</ID>
    <ID>MagicNumber:TrackGooglePurchase.kt$TrackGooglePurchase$3</ID>
    <ID>MagicNumber:TrackGooglePurchase.kt$TrackGooglePurchase.&lt;no name provided&gt;$99</ID>
    <ID>MagicNumber:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$3</ID>
    <ID>MagicNumber:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$4</ID>
    <ID>MagicNumber:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$99</ID>
    <ID>MagicNumber:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$404</ID>
    <ID>MemberNameEqualsClassName:OneSignal.kt$OneSignal$private val oneSignal: IOneSignal by lazy { OneSignalImp() }</ID>
    <ID>NestedBlockDepth:IdentityOperationExecutor.kt$IdentityOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>NestedBlockDepth:InfluenceManager.kt$InfluenceManager$private fun attemptSessionUpgrade( entryAction: AppEntryAction, directId: String? = null, )</ID>
    <ID>NestedBlockDepth:JSONUtils.kt$JSONUtils$fun compareJSONArrays( jsonArray1: JSONArray?, jsonArray2: JSONArray?, ): Boolean</ID>
    <ID>NestedBlockDepth:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private suspend fun createUser( createUserOperation: LoginUserOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>NestedBlockDepth:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private suspend fun getUser(op: RefreshUserOperation): ExecutionResponse</ID>
    <ID>NestedBlockDepth:ServiceRegistration.kt$ServiceRegistrationReflection$override fun resolve(provider: IServiceProvider): Any?</ID>
    <ID>NestedBlockDepth:ServiceRegistration.kt$ServiceRegistrationReflection$private fun doesHaveAllParameters( constructor: Constructor&lt;*&gt;, provider: IServiceProvider, ): Boolean</ID>
    <ID>NestedBlockDepth:TrackGooglePurchase.kt$TrackGooglePurchase$private fun sendPurchases( skusToAdd: ArrayList&lt;String&gt;, newPurchaseTokens: ArrayList&lt;String&gt;, )</ID>
    <ID>NestedBlockDepth:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>PrintStackTrace:AndroidUtils.kt$AndroidUtils$e</ID>
    <ID>PrintStackTrace:ApplicationService.kt$ApplicationService$e</ID>
    <ID>PrintStackTrace:DeviceUtils.kt$DeviceUtils$t</ID>
    <ID>PrintStackTrace:JSONUtils.kt$JSONUtils$e</ID>
    <ID>PrintStackTrace:OSDatabase.kt$OSDatabase$e</ID>
    <ID>PrintStackTrace:OutcomeTableProvider.kt$OutcomeTableProvider$e</ID>
    <ID>PrintStackTrace:TrackGooglePurchase.kt$TrackGooglePurchase$e</ID>
    <ID>PrintStackTrace:TrackGooglePurchase.kt$TrackGooglePurchase.&lt;no name provided&gt;$t</ID>
    <ID>RethrowCaughtException:OSDatabase.kt$OSDatabase$throw e</ID>
    <ID>ReturnCount:AppIdResolution.kt$fun resolveAppId( inputAppId: String?, configModel: ConfigModel, preferencesService: IPreferencesService, ): AppIdResolution</ID>
    <ID>ReturnCount:BackgroundManager.kt$BackgroundManager$override fun cancelRunBackgroundServices(): Boolean</ID>
    <ID>ReturnCount:ConfigModel.kt$ConfigModel$override fun createModelForProperty( property: String, jsonObject: JSONObject, ): Model?</ID>
    <ID>ReturnCount:HttpClient.kt$HttpClient$private suspend fun makeRequest( url: String, method: String?, jsonBody: JSONObject?, timeout: Int, headers: OptionalHeaders?, ): HttpResponse</ID>
    <ID>ReturnCount:IdentityOperationExecutor.kt$IdentityOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>ReturnCount:JSONUtils.kt$JSONUtils$fun compareJSONArrays( jsonArray1: JSONArray?, jsonArray2: JSONArray?, ): Boolean</ID>
    <ID>ReturnCount:LoginUserFromSubscriptionOperationExecutor.kt$LoginUserFromSubscriptionOperationExecutor$private suspend fun loginUser(loginUserOp: LoginUserFromSubscriptionOperation): ExecutionResponse</ID>
    <ID>ReturnCount:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$private suspend fun loginUser( loginUserOp: LoginUserOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>ReturnCount:Model.kt$Model$protected fun getOptBigDecimalProperty( name: String, create: (() -&gt; BigDecimal?)? = null, ): BigDecimal?</ID>
    <ID>ReturnCount:Model.kt$Model$protected fun getOptDoubleProperty( name: String, create: (() -&gt; Double?)? = null, ): Double?</ID>
    <ID>ReturnCount:Model.kt$Model$protected fun getOptFloatProperty( name: String, create: (() -&gt; Float?)? = null, ): Float?</ID>
    <ID>ReturnCount:Model.kt$Model$protected fun getOptIntProperty( name: String, create: (() -&gt; Int?)? = null, ): Int?</ID>
    <ID>ReturnCount:Model.kt$Model$protected fun getOptLongProperty( name: String, create: (() -&gt; Long?)? = null, ): Long?</ID>
    <ID>ReturnCount:Model.kt$Model$protected inline fun &lt;reified T : Enum&lt;T&gt;&gt; getOptEnumProperty(name: String): T?</ID>
    <ID>ReturnCount:OperationModelStore.kt$OperationModelStore$override fun create(jsonObject: JSONObject?): Operation?</ID>
    <ID>ReturnCount:OperationModelStore.kt$OperationModelStore$private fun isValidOperation(jsonObject: JSONObject): Boolean</ID>
    <ID>ReturnCount:OutcomeEventsController.kt$OutcomeEventsController$private suspend fun sendAndCreateOutcomeEvent( name: String, weight: Float, // Note: this is optional sessionTime: Long, influences: List&lt;Influence&gt;, ): OutcomeEvent?</ID>
    <ID>ReturnCount:OutcomeEventsController.kt$OutcomeEventsController$private suspend fun sendUniqueOutcomeEvent( name: String, sessionInfluences: List&lt;Influence&gt;, ): OutcomeEvent?</ID>
    <ID>ReturnCount:PermissionsViewModel.kt$PermissionsViewModel$private fun shouldShowSettings( permission: String, shouldShowRationaleAfter: Boolean, ): Boolean</ID>
    <ID>ReturnCount:PermissionsViewModel.kt$PermissionsViewModel$suspend fun initialize( activity: Activity, permissionType: String?, androidPermission: String?, ): Boolean</ID>
    <ID>ReturnCount:PreferenceStoreFix.kt$PreferenceStoreFix$fun ensureNoObfuscatedPrefStore(context: Context)</ID>
    <ID>ReturnCount:PreferencesService.kt$PreferencesService$private fun get( store: String, key: String, type: Class&lt;*&gt;, defValue: Any?, ): Any?</ID>
    <ID>ReturnCount:PropertiesModelStoreListener.kt$PropertiesModelStoreListener$override fun getUpdateOperation( model: PropertiesModel, path: String, property: String, oldValue: Any?, newValue: Any?, ): Operation?</ID>
    <ID>ReturnCount:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$private suspend fun getUser(op: RefreshUserOperation): ExecutionResponse</ID>
    <ID>ReturnCount:ServiceRegistration.kt$ServiceRegistrationReflection$private fun doesHaveAllParameters( constructor: Constructor&lt;*&gt;, provider: IServiceProvider, ): Boolean</ID>
    <ID>ReturnCount:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private suspend fun createSubscription( createOperation: CreateSubscriptionOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>ReturnCount:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$private suspend fun updateSubscription( startingOperation: UpdateSubscriptionOperation, operations: List&lt;Operation&gt;, ): ExecutionResponse</ID>
    <ID>ReturnCount:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$override suspend fun execute(operations: List&lt;Operation&gt;): ExecutionResponse</ID>
    <ID>SpreadOperator:AndroidUtils.kt$AndroidUtils$(*packageInfo.requestedPermissions)</ID>
    <ID>SpreadOperator:ServiceRegistration.kt$ServiceRegistrationReflection$(*paramList.toTypedArray())</ID>
    <ID>StringLiteralDuplication:OSDatabase.kt$OSDatabase$"Error closing transaction! "</ID>
    <ID>StringLiteralDuplication:OutcomesDbContract.kt$OutcomesDbContract$"CREATE TABLE "</ID>
    <ID>SwallowedException:AlertDialogPrepromptForAndroidSettings.kt$AlertDialogPrepromptForAndroidSettings$ex: BadTokenException</ID>
    <ID>SwallowedException:AndroidUtils.kt$AndroidUtils$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:AndroidUtils.kt$AndroidUtils$e: Throwable</ID>
    <ID>SwallowedException:DeviceService.kt$DeviceService$e: ClassNotFoundException</ID>
    <ID>SwallowedException:DeviceService.kt$DeviceService$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:JSONUtils.kt$JSONUtils$t: Throwable</ID>
    <ID>SwallowedException:OneSignalImp.kt$OneSignalImp$e: TimeoutCancellationException</ID>
    <ID>SwallowedException:PermissionsActivity.kt$PermissionsActivity$e: ClassNotFoundException</ID>
    <ID>SwallowedException:PreferencesService.kt$PreferencesService$ex: Exception</ID>
    <ID>SwallowedException:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$t: Throwable</ID>
    <ID>ThrowsCount:OneSignalImp.kt$OneSignalImp$private suspend fun suspendUntilInit()</ID>
    <ID>TooGenericExceptionCaught:AndroidUtils.kt$AndroidUtils$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:DeviceUtils.kt$DeviceUtils$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:HttpClient.kt$HttpClient$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:HttpClient.kt$HttpClient$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:JSONUtils.kt$JSONUtils$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Logging.kt$Logging$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:OneSignalDispatchers.kt$OneSignalDispatchers$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OperationRepo.kt$OperationRepo$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:PreferenceStoreFix.kt$PreferenceStoreFix$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:PreferencesService.kt$PreferencesService$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:PreferencesService.kt$PreferencesService$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ThreadUtils.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TrackGooglePurchase.kt$TrackGooglePurchase$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:TrackGooglePurchase.kt$TrackGooglePurchase$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:TrackGooglePurchase.kt$TrackGooglePurchase.&lt;no name provided&gt;$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:TrackGooglePurchase.kt$TrackGooglePurchase.Companion$t: Throwable</ID>
    <ID>TooGenericExceptionThrown:IdentityOperationExecutor.kt$IdentityOperationExecutor$throw Exception("Can't process SetAliasOperation and DeleteAliasOperation at the same time.")</ID>
    <ID>TooGenericExceptionThrown:IdentityOperationExecutor.kt$IdentityOperationExecutor$throw Exception("Unrecognized operation(s)! Attempted operations:\n$operations")</ID>
    <ID>TooGenericExceptionThrown:LoginUserFromSubscriptionOperationExecutor.kt$LoginUserFromSubscriptionOperationExecutor$throw Exception("Only supports one operation! Attempted operations:\n$operations")</ID>
    <ID>TooGenericExceptionThrown:LoginUserFromSubscriptionOperationExecutor.kt$LoginUserFromSubscriptionOperationExecutor$throw Exception("Unrecognized operation: $startingOp")</ID>
    <ID>TooGenericExceptionThrown:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$throw Exception("Unrecognized operation: $operation")</ID>
    <ID>TooGenericExceptionThrown:LoginUserOperationExecutor.kt$LoginUserOperationExecutor$throw Exception("Unrecognized operation: $startingOp")</ID>
    <ID>TooGenericExceptionThrown:Model.kt$Model$throw Exception("If parent model is set, parent property must also be set.")</ID>
    <ID>TooGenericExceptionThrown:Model.kt$Model$throw Exception("If parent property is set, parent model must also be set.")</ID>
    <ID>TooGenericExceptionThrown:OperationModelStore.kt$OperationModelStore$throw Exception("Unrecognized operation: $operationName")</ID>
    <ID>TooGenericExceptionThrown:OperationRepo.kt$OperationRepo$throw Exception("Both comparison keys can not be blank!")</ID>
    <ID>TooGenericExceptionThrown:OperationRepo.kt$OperationRepo$throw Exception("Could not find executor for operation ${startingOp.operation.name}")</ID>
    <ID>TooGenericExceptionThrown:PermissionsActivity.kt$PermissionsActivity$throw RuntimeException( "Could not find callback class for PermissionActivity: $className", )</ID>
    <ID>TooGenericExceptionThrown:PermissionsViewModel.kt$PermissionsViewModel$throw RuntimeException("Missing handler for permissionRequestType: $permissionRequestType")</ID>
    <ID>TooGenericExceptionThrown:PreferencesService.kt$PreferencesService$throw Exception("Store not found: $store")</ID>
    <ID>TooGenericExceptionThrown:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$throw Exception("Unrecognized operation(s)! Attempted operations:\n$operations")</ID>
    <ID>TooGenericExceptionThrown:RefreshUserOperationExecutor.kt$RefreshUserOperationExecutor$throw Exception("Unrecognized operation: $startingOp")</ID>
    <ID>TooGenericExceptionThrown:ServiceProvider.kt$ServiceProvider$throw Exception("Could not instantiate service: $serviceReg")</ID>
    <ID>TooGenericExceptionThrown:ServiceProvider.kt$ServiceProvider$throw Exception("Service $c could not be instantiated")</ID>
    <ID>TooGenericExceptionThrown:SingletonModelStore.kt$SingletonModelStore$throw Exception("Unable to initialize model from store $store")</ID>
    <ID>TooGenericExceptionThrown:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$throw Exception("Only supports one operation! Attempted operations:\n$operations")</ID>
    <ID>TooGenericExceptionThrown:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$throw Exception("TransferSubscriptionOperation only supports one operation! Attempted operations:\n$operations")</ID>
    <ID>TooGenericExceptionThrown:SubscriptionOperationExecutor.kt$SubscriptionOperationExecutor$throw Exception("Unrecognized operation: $startingOp")</ID>
    <ID>TooGenericExceptionThrown:UpdateUserOperationExecutor.kt$UpdateUserOperationExecutor$throw Exception("Unrecognized operation: $operation")</ID>
    <ID>TooGenericExceptionThrown:Waiter.kt$Waiter$throw Exception("Waiter.wait failed", result.exceptionOrNull())</ID>
    <ID>TooGenericExceptionThrown:Waiter.kt$WaiterWithValue$throw Exception("WaiterWithValue.wait failed", result.exceptionOrNull())</ID>
    <ID>TooManyFunctions:AndroidUtils.kt$AndroidUtils$AndroidUtils</ID>
    <ID>TooManyFunctions:ApplicationService.kt$ApplicationService : IApplicationServiceActivityLifecycleCallbacksOnGlobalLayoutListener</ID>
    <ID>TooManyFunctions:BackgroundManager.kt$BackgroundManager : IApplicationLifecycleHandlerIBackgroundManagerIStartableService</ID>
    <ID>TooManyFunctions:HttpClient.kt$HttpClient : IHttpClient</ID>
    <ID>TooManyFunctions:IOneSignal.kt$IOneSignal</ID>
    <ID>TooManyFunctions:IUserManager.kt$IUserManager</ID>
    <ID>TooManyFunctions:InfluenceManager.kt$InfluenceManager : IInfluenceManagerISessionLifecycleHandler</ID>
    <ID>TooManyFunctions:JSONObjectExtensions.kt$com.onesignal.common.JSONObjectExtensions.kt</ID>
    <ID>TooManyFunctions:Logging.kt$Logging$Logging</ID>
    <ID>TooManyFunctions:Model.kt$Model : IEventNotifier</ID>
    <ID>TooManyFunctions:ModelStore.kt$ModelStore&lt;TModel&gt; : IEventNotifierIModelStoreIModelChangedHandler</ID>
    <ID>TooManyFunctions:OSDatabase.kt$OSDatabase : SQLiteOpenHelperIDatabase</ID>
    <ID>TooManyFunctions:OneSignalImp.kt$OneSignalImp : IOneSignalIServiceProvider</ID>
    <ID>TooManyFunctions:OperationRepo.kt$OperationRepo : IOperationRepoIStartableService</ID>
    <ID>TooManyFunctions:OutcomeEventsController.kt$OutcomeEventsController : IOutcomeEventsControllerIStartableServiceISessionLifecycleHandler</ID>
    <ID>TooManyFunctions:PreferencesService.kt$PreferencesService : IPreferencesServiceIStartableService</ID>
    <ID>TooManyFunctions:SubscriptionManager.kt$SubscriptionManager : ISubscriptionManagerIModelStoreChangeHandlerISessionLifecycleHandler</ID>
    <ID>TooManyFunctions:UserManager.kt$UserManager : IUserManagerIApplicationLifecycleHandlerISingletonModelStoreChangeHandler</ID>
    <ID>UndocumentedPublicClass:AlertDialogPrepromptForAndroidSettings.kt$AlertDialogPrepromptForAndroidSettings$Callback</ID>
    <ID>UndocumentedPublicClass:AndroidUtils.kt$AndroidUtils</ID>
    <ID>UndocumentedPublicClass:AndroidUtils.kt$AndroidUtils$SchemaType</ID>
    <ID>UndocumentedPublicClass:AppIdResolution.kt$AppIdResolution</ID>
    <ID>UndocumentedPublicClass:ApplicationService.kt$ApplicationService : IApplicationServiceActivityLifecycleCallbacksOnGlobalLayoutListener</ID>
    <ID>UndocumentedPublicClass:ConfigModel.kt$ConfigModel : Model</ID>
    <ID>UndocumentedPublicClass:ConfigModelStore.kt$ConfigModelStore : SingletonModelStore</ID>
    <ID>UndocumentedPublicClass:DateUtils.kt$DateUtils</ID>
    <ID>UndocumentedPublicClass:DeviceUtils.kt$DeviceUtils</ID>
    <ID>UndocumentedPublicClass:ICondition.kt$ICondition</ID>
    <ID>UndocumentedPublicClass:IConsistencyKeyEnum.kt$IConsistencyKeyEnum</ID>
    <ID>UndocumentedPublicClass:IConsistencyManager.kt$IConsistencyManager</ID>
    <ID>UndocumentedPublicClass:IDeviceService.kt$IDeviceService</ID>
    <ID>UndocumentedPublicClass:IDeviceService.kt$IDeviceService$DeviceType</ID>
    <ID>UndocumentedPublicClass:IDeviceService.kt$IDeviceService$JetpackLibraryStatus</ID>
    <ID>UndocumentedPublicClass:IIdentityBackendService.kt$IIdentityBackendService</ID>
    <ID>UndocumentedPublicClass:IIdentityBackendService.kt$IdentityConstants</ID>
    <ID>UndocumentedPublicClass:IInAppMessage.kt$IInAppMessage</ID>
    <ID>UndocumentedPublicClass:IInAppMessageClickListener.kt$IInAppMessageClickListener</ID>
    <ID>UndocumentedPublicClass:IInfluenceManager.kt$IInfluenceManager</ID>
    <ID>UndocumentedPublicClass:IInstallIdService.kt$IInstallIdService</ID>
    <ID>UndocumentedPublicClass:ILanguageContext.kt$ILanguageContext</ID>
    <ID>UndocumentedPublicClass:ILogListener.kt$ILogListener</ID>
    <ID>UndocumentedPublicClass:IModelStore.kt$ModelChangeTags</ID>
    <ID>UndocumentedPublicClass:INotification.kt$INotification</ID>
    <ID>UndocumentedPublicClass:IOneSignal.kt$IOneSignal</ID>
    <ID>UndocumentedPublicClass:IOperationExecutor.kt$ExecutionResponse</ID>
    <ID>UndocumentedPublicClass:IOperationExecutor.kt$ExecutionResult</ID>
    <ID>UndocumentedPublicClass:IOutcomeEvent.kt$IOutcomeEvent</ID>
    <ID>UndocumentedPublicClass:IParamsBackendService.kt$FCMParamsObject</ID>
    <ID>UndocumentedPublicClass:IParamsBackendService.kt$IParamsBackendService</ID>
    <ID>UndocumentedPublicClass:IParamsBackendService.kt$InfluenceParamsObject</ID>
    <ID>UndocumentedPublicClass:IParamsBackendService.kt$ParamsObject</ID>
    <ID>UndocumentedPublicClass:IPreferencesService.kt$PreferenceOneSignalKeys</ID>
    <ID>UndocumentedPublicClass:IPreferencesService.kt$PreferencePlayerPurchasesKeys</ID>
    <ID>UndocumentedPublicClass:IPreferencesService.kt$PreferenceStores</ID>
    <ID>UndocumentedPublicClass:IRebuildUserService.kt$IRebuildUserService</ID>
    <ID>UndocumentedPublicClass:IRequestPermissionService.kt$IRequestPermissionService$PermissionCallback</ID>
    <ID>UndocumentedPublicClass:ISubscriptionBackendService.kt$ISubscriptionBackendService</ID>
    <ID>UndocumentedPublicClass:ISubscriptionManager.kt$ISubscriptionChangedHandler</ID>
    <ID>UndocumentedPublicClass:ISubscriptionManager.kt$ISubscriptionManager : IEventNotifier</ID>
    <ID>UndocumentedPublicClass:IUserBackendService.kt$CreateUserResponse</ID>
    <ID>UndocumentedPublicClass:IUserBackendService.kt$IUserBackendService</ID>
    <ID>UndocumentedPublicClass:IdentityModelStore.kt$IdentityModelStore : SingletonModelStore</ID>
    <ID>UndocumentedPublicClass:Influence.kt$Influence</ID>
    <ID>UndocumentedPublicClass:InfluenceChannel.kt$InfluenceChannel</ID>
    <ID>UndocumentedPublicClass:InfluenceType.kt$InfluenceType</ID>
    <ID>UndocumentedPublicClass:JSONConverter.kt$JSONConverter</ID>
    <ID>UndocumentedPublicClass:JSONUtils.kt$JSONUtils</ID>
    <ID>UndocumentedPublicClass:LogLevel.kt$LogLevel</ID>
    <ID>UndocumentedPublicClass:Logging.kt$Logging</ID>
    <ID>UndocumentedPublicClass:LoginHelper.kt$LoginHelper</ID>
    <ID>UndocumentedPublicClass:LogoutHelper.kt$LogoutHelper</ID>
    <ID>UndocumentedPublicClass:MigrationRecovery.kt$MigrationRecovery : IMigrationRecovery</ID>
    <ID>UndocumentedPublicClass:NetworkUtils.kt$NetworkUtils</ID>
    <ID>UndocumentedPublicClass:NetworkUtils.kt$NetworkUtils$ResponseStatusType</ID>
    <ID>UndocumentedPublicClass:OneSignalDbContract.kt$OneSignalDbContract</ID>
    <ID>UndocumentedPublicClass:OneSignalDbContract.kt$OneSignalDbContract$InAppMessageTable : BaseColumns</ID>
    <ID>UndocumentedPublicClass:OneSignalDbContract.kt$OneSignalDbContract$NotificationTable : BaseColumns</ID>
    <ID>UndocumentedPublicClass:OneSignalLogEvent.kt$OneSignalLogEvent</ID>
    <ID>UndocumentedPublicClass:OneSignalUtils.kt$OneSignalUtils</ID>
    <ID>UndocumentedPublicClass:OneSignalWrapper.kt$OneSignalWrapper</ID>
    <ID>UndocumentedPublicClass:Operation.kt$GroupComparisonType</ID>
    <ID>UndocumentedPublicClass:OptionalHeaders.kt$OptionalHeaders</ID>
    <ID>UndocumentedPublicClass:PreferenceStoreFix.kt$PreferenceStoreFix</ID>
    <ID>UndocumentedPublicClass:PropertiesDeltasObject.kt$PropertiesDeltasObject</ID>
    <ID>UndocumentedPublicClass:PropertiesDeltasObject.kt$PurchaseObject</ID>
    <ID>UndocumentedPublicClass:PropertiesModel.kt$PropertiesModel : Model</ID>
    <ID>UndocumentedPublicClass:PropertiesModelStore.kt$PropertiesModelStore : SingletonModelStore</ID>
    <ID>UndocumentedPublicClass:PropertiesObject.kt$PropertiesObject</ID>
    <ID>UndocumentedPublicClass:PushSubscriptionChangedState.kt$PushSubscriptionChangedState</ID>
    <ID>UndocumentedPublicClass:RebuildUserService.kt$RebuildUserService : IRebuildUserService</ID>
    <ID>UndocumentedPublicClass:RootToolsInternalMethods.kt$RootToolsInternalMethods</ID>
    <ID>UndocumentedPublicClass:RywData.kt$RywData</ID>
    <ID>UndocumentedPublicClass:ServiceBuilder.kt$ServiceBuilder : IServiceBuilder</ID>
    <ID>UndocumentedPublicClass:SessionModelStore.kt$SessionModelStore : SingletonModelStore</ID>
    <ID>UndocumentedPublicClass:SubscriptionModel.kt$SubscriptionModel : Model</ID>
    <ID>UndocumentedPublicClass:SubscriptionModel.kt$SubscriptionStatus</ID>
    <ID>UndocumentedPublicClass:SubscriptionModel.kt$SubscriptionType</ID>
    <ID>UndocumentedPublicClass:SubscriptionModelStore.kt$SubscriptionModelStore : SimpleModelStore</ID>
    <ID>UndocumentedPublicClass:SubscriptionObject.kt$SubscriptionObject</ID>
    <ID>UndocumentedPublicClass:SubscriptionObjectType.kt$SubscriptionObjectType</ID>
    <ID>UndocumentedPublicClass:SyncJobService.kt$SyncJobService : JobService</ID>
    <ID>UndocumentedPublicClass:TimeUtils.kt$TimeUtils</ID>
    <ID>UndocumentedPublicClass:UserChangedState.kt$UserChangedState</ID>
    <ID>UndocumentedPublicClass:UserRefreshService.kt$UserRefreshService : IStartableServiceISessionLifecycleHandler</ID>
    <ID>UndocumentedPublicClass:UserSwitcher.kt$UserSwitcher</ID>
    <ID>UndocumentedPublicClass:ViewUtils.kt$ViewUtils</ID>
    <ID>UnusedPrivateMember:AndroidUtils.kt$AndroidUtils$_class: Class&lt;*&gt;</ID>
    <ID>UnusedPrivateMember:AndroidUtils.kt$AndroidUtils$var requestPermission: String? = null</ID>
    <ID>UnusedPrivateMember:ApplicationService.kt$ApplicationService$val listenerKey = "decorViewReady:$runnable"</ID>
    <ID>UnusedPrivateMember:JSONUtils.kt$JSONUtils$`object`: Any</ID>
    <ID>UnusedPrivateMember:LoginHelper.kt$LoginHelper$jwtBearerToken: String? = null</ID>
    <ID>UnusedPrivateMember:OSDatabase.kt$OSDatabase.Companion$private const val FLOAT_TYPE = " FLOAT"</ID>
    <ID>UnusedPrivateMember:OperationRepo.kt$OperationRepo$private val _time: ITime</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("'initWithContext failed' before 'login'")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("'initWithContext failed' before 'logout'")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("Initialization failed. Cannot proceed.")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("Must call 'initWithContext' before 'login'")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("Must call 'initWithContext' before 'logout'")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("Must call 'initWithContext' before use")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("initWithContext was not called or timed out")</ID>
    <ID>UseCheckOrError:OneSignalImp.kt$OneSignalImp$throw IllegalStateException("initWithContext was timed out after $MAX_TIMEOUT_TO_INIT ms")</ID>
  </CurrentIssues>
</SmellBaseline>
